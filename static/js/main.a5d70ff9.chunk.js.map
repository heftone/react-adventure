{"version":3,"sources":["App.js","components/Home.js","components/North.js","components/South.js","components/East.js","components/West.js","components/Error.js","serviceWorker.js","index.js"],"names":["App","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","value","handleChange","bind","assertThisInitialized","handleSubmit","event","setState","target","history","push","react_default","a","createElement","onSubmit","onChange","type","Component","withRouter","Home","North","South","East","West","Error","Boolean","window","location","hostname","match","ReactDOM","render","react_router_dom","react_router","path","component","exact","src_App","document","getElementById"],"mappings":"kQAGMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KACDQ,MAAQ,CACXC,MAAO,IAGTR,EAAKS,aAAeT,EAAKS,aAAaC,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KACpBA,EAAKY,aAAeZ,EAAKY,aAAaF,KAAlBT,OAAAU,EAAA,EAAAV,QAAAU,EAAA,EAAAV,CAAAD,KAPHA,4EAUNa,GACXV,KAAKW,SAAS,CAACN,MAAOK,EAAME,OAAOP,6CAIxBK,GAEgB,UAArBV,KAAKI,MAAMC,OACbL,KAAKJ,MAAMiB,QAAQC,KAAK,UAGF,UAApBd,KAAKI,MAAMC,OACbL,KAAKJ,MAAMiB,QAAQC,KAAK,UAGF,SAApBd,KAAKI,MAAMC,OACbL,KAAKJ,MAAMiB,QAAQC,KAAK,SAIF,SAApBd,KAAKI,MAAMC,OACbL,KAAKJ,MAAMiB,QAAQC,KAAK,SAGF,UAApBd,KAAKI,MAAMC,OACbL,KAAKJ,MAAMiB,QAAQC,KAAK,2CAO5B,OAIFC,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,QAAMC,SAAUlB,KAAKS,cACrBM,EAAAC,EAAAC,cAAA,0BACEF,EAAAC,EAAAC,cAAA,SAAOZ,MAAOL,KAAKI,MAAMC,MAAOc,SAAUnB,KAAKM,gBAEjDS,EAAAC,EAAAC,cAAA,SAAOG,KAAK,SAASf,MAAM,oBArDfgB,aA6DHC,cAAW3B,UCtDX4B,EARF,WACT,OACIR,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mCCMGO,EATD,WACV,OACIT,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,uDCKGQ,EATD,WACV,OACIV,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,mCCKGS,EATF,WACT,OACIX,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,kCCKGU,EATF,WACT,OACIZ,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,kCCKGW,EATD,WACV,OACIb,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,iCACAF,EAAAC,EAAAC,cAAA,0CCMQY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCGNC,IAASC,OAAOpB,EAAAC,EAAAC,cAACmB,EAAA,EAAD,KAEdrB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,KAGCtB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAK,IAAIC,UAAWhB,EAAMiB,OAAK,IACtCzB,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWf,IAC/BT,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAK,SAASC,UAAWd,IAChCV,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWb,IAC/BX,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOC,KAAK,QAAQC,UAAWZ,IAC/BZ,EAAAC,EAAAC,cAACoB,EAAA,EAAD,CAAOE,UAAWX,KAKpBb,EAAAC,EAAAC,cAACwB,EAAD,OACkBC,SAASC,eAAe","file":"static/js/main.a5d70ff9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { withRouter } from \"react-router-dom\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      value: ''\n    };\n\n    this.handleChange = this.handleChange.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  handleChange(event) {\n    this.setState({value: event.target.value});\n  }\n\n\n  handleSubmit(event) {\n     \n      if (this.state.value === \"north\"){\n        this.props.history.push('/north');\n       \n      }\n      if (this.state.value ===\"south\"){\n        this.props.history.push('/south');\n      }\n\n      if (this.state.value ===\"east\"){\n        this.props.history.push('/east');\n      }\n\n\n      if (this.state.value ===\"west\"){\n        this.props.history.push('/west');\n      }\n\n      if (this.state.value ===\"error\"){\n        this.props.history.push('/error');\n      }\n\n  }\n\n  render() {\n\n    return (\n\n\n  \n  <div>\n \n      <form onSubmit={this.handleSubmit}>\n      <label>Type Here: \n        <input value={this.state.value} onChange={this.handleChange} />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n     \n    </form>\n</div>\n    );\n  }\n}\n\nexport default withRouter(App);\n  // eslint-disable-next-line \n/*\n\n<Game />\n\n\n  */\n \n \n \n  /*    \n\n   function validateForm() {\n  var x = document.forms[\"myForm\"][\"fname\"].value;\n  if (x == \"\") {\n    alert(\"Name must be filled out\");\n    return false;\n  }\n  if (x == \"yes\") {\n    return component={About}\n  }\n}\n   */\n\n\n/*\n\nfunction validate(name) {\n  const story1 = [];\n\n \n      if (name === \"yes\" || name ===\"no\") {\n        story1.push(\"I am Grod from Zod!\");\n      }\n      if (name === \"hi\" || name ===\"bye\") {\n        story1.push(\"Another Solar System\");\n      }\n      else {\n        story1.push(\"INVALID\");\n      }\n      return story1;\n    \n}\n\n\nclass Grod extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      name: \"\",\n      story1:[],\n    };\n    this.handleSubmit = this.handleSubmit.bind(this);\n}\n\nhandleSubmit = e => {\n  e.preventDefault();\n\nconst { name } = this.state;\n\n\n  const story1 = validate(name);\n  if (story1.length > 0) {\n    this.setState({ story1 });\n\n\n    return;\n\n\n      \n  }\n\n//submit the data\n};\nrender() {\n\n  const { story1 } = this.state;\n\n  return (\n\n\n    <form onSubmit={this.handleSubmit}>\n    {story1.map(story1 => (\n      <p key={story1}>{story1}</p>\n      \n    ))}\n        <div>\n    <h1>Welcome to the story of GROD!!</h1>\n    </div>\n    <input\n      value={this.state.name}\n      onChange={evt => this.setState({ name: evt.target.value })}\n      type=\"text\"\n      placeholder=\"Name\"\n      />\n      <button type=\"submit\">Press Enter Mortal!</button>\n      <h1>{ story1 }</h1>\n\n    </form>\n\n    \n\n\n    );\n  }\n}\n\nconst rootElement = document.getElementById(\"root\");\nReactDOM.render(<Grod />, rootElement);\n\nserviceWorker.unregister();\n\n\n\n\n<BrowserRouter>\n<div>\n  \n  <Navigation />\n  <Switch>\n   \n\n   <Route path=\"/\" component={Home} exact />\n   <Route path=\"/about\" component={About} />\n    <Route path=\"/contact\" component={Contact} />\n    <Route path=\"/submit\" component={Submit} />\n    <Route component={Error} />\n\n  </Switch>\n\n  \n  <div>\n      <form onSubmit={this.handleSubmit}>\n      <label>\n        Type Here:\n        <input value={this.state.value} onChange={this.handleChange} />\n      </label>\n      <input type=\"submit\" value=\"Submit\" />\n     \n    </form>\n</div>\n\n</div>\n</BrowserRouter>\n\n\n\n*/","import React from \"react\";\n\nconst Home = () => {\n    return (\n        <div>\n            <h1>GROD, the Conquerer</h1>\n        </div>\n    );\n};\n\nexport default Home;\n","import React from \"react\";\n\nconst North = () => {\n    return (\n        <div>\n            <h1>GROD, the Conquerer</h1>\n            <p>I am Grod from Zod. You are going north.</p>\n        </div>\n    );\n};\n\nexport default North;","import React from \"react\";\n\nconst South = () => {\n    return (\n        <div>\n            <h1>GROD, the Conquerer</h1>\n            <p>You are going south.</p>\n        </div>\n    );\n};\n\nexport default South;","import React from \"react\";\n\nconst East = () => {\n    return (\n        <div>\n            <h1>GROD, the Conquerer</h1>\n            <p>You are going east.</p>\n        </div>\n    );\n};\n\nexport default East;","import React from \"react\";\n\nconst West = () => {\n    return (\n        <div>\n            <h1>GROD, the Conquerer</h1>\n            <p>You are going west.</p>\n        </div>\n    );\n};\n\nexport default West;","import React from \"react\";\n\nconst Error = () => {\n    return (\n        <div>\n            <h1>GROD, the Conquerer</h1>\n            <p>Error: Page does not exist.</p>\n        </div>\n    );\n};\n\nexport default Error;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './index.css';\nimport App from './App';\n\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\";\n\nimport Home from \"./components/Home\";\nimport North from \"./components/North\";\nimport South from \"./components/South\";\nimport East from \"./components/East\";\nimport West from \"./components/West\";\nimport Error from \"./components/Error\";\n\n\n\n  // eslint-disable-next-line \nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(<BrowserRouter>\n\n  <Switch>\n   \n\n   <Route path=\"/\" component={Home} exact />\n   <Route path=\"/north\" component={North} />\n    <Route path=\"/south\" component={South} />\n    <Route path=\"/east\" component={East} />\n    <Route path=\"/west\" component={West} />\n    <Route component={Error} />\n    \n  \n\n  </Switch>\n  <App />\n  </BrowserRouter>, document.getElementById('root'));\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\n\n//serviceWorker.unregister();\n"],"sourceRoot":""}